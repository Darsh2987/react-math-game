{"version":3,"sources":["components/Main.js","App.js","reportWebVitals.js","index.js"],"names":["Main","correctAnswer","useState","generateProblem","currentProblem","setCurrentProblem","score","setScore","mistakes","setMistakes","userAnswer","setUserAnswer","showError","setShowError","answerField","useRef","resetButton","generateNumber","max","Math","floor","random","numberOne","numberTwo","operator","useEffect","setTimeout","current","focus","className","id","onSubmit","e","preventDefault","parseInt","prev","action","type","autoComplete","value","ref","onChange","target","style","transform","onClick","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yLAoIeA,MAlIf,WAAiB,IA8BXC,EA9BU,EAC8BC,mBAASC,KADvC,mBACPC,EADO,KACSC,EADT,OAEYH,mBAAS,GAFrB,mBAEPI,EAFO,KAEAC,EAFA,OAGkBL,mBAAS,GAH3B,mBAGPM,EAHO,KAGGC,EAHH,OAIsBP,mBAAS,IAJ/B,mBAIPQ,EAJO,KAIKC,EAJL,OAKoBT,oBAAS,GAL7B,mBAKPU,EALO,KAKIC,EALJ,KAMRC,EAAcC,iBAAO,MACrBC,EAAcD,iBAAO,MAU3B,SAASE,EAAeC,GACtB,OAAOC,KAAKC,MAAMD,KAAKE,UAAYH,EAAM,IAI3C,SAASf,IACP,MAAO,CACLmB,UAAWL,EAAe,IAC1BM,UAAWN,EAAe,IAC1BO,SAAU,CAAC,IAAK,IAAK,KAAKP,EAAe,KAwC7C,OAxDAQ,qBAAU,WACM,KAAVnB,GAA6B,IAAbE,GAClBkB,YAAW,kBAAMV,EAAYW,QAAQC,UAAS,OAE/C,CAACtB,EAAOE,IAmBqB,MAA5BJ,EAAeoB,SACjBvB,EAAgBG,EAAekB,UAAYlB,EAAemB,UACrB,MAA5BnB,EAAeoB,SACxBvB,EAAgBG,EAAekB,UAAYlB,EAAemB,UACrB,MAA5BnB,EAAeoB,WACxBvB,EAAgBG,EAAekB,UAAYlB,EAAemB,WA6B1D,gCACE,sBAAKM,UAAW,WAA0B,IAAbrB,GAA4B,KAAVF,EAAe,WAAa,IAA3E,UAEE,oBAAGwB,GAAG,UAAUD,UAAW,WAAajB,EAAY,iBAAmB,IAAvE,UACGR,EAAekB,UADlB,IAC8BlB,EAAeoB,SAD7C,IACwDpB,EAAemB,aAGvE,uBAAMO,GAAG,OAAOD,UAAU,OAAOE,SAhCvC,SAAsBC,GACpBA,EAAEC,iBAEFnB,EAAYa,QAAQC,QAEhBlB,GAAcwB,SAASjC,IACzBM,GAAS,SAAC4B,GAAD,OAAUA,EAAO,KAC1B9B,EAAkBF,KAClBQ,EAAc,MAEdF,GAAY,SAAC0B,GAAD,OAAUA,EAAO,KAC7BtB,GAAa,GACba,YAAW,kBAAMb,GAAa,KAAQ,OAoBqBuB,OAAO,GAAhE,UACE,uBACEN,GAAG,QACHD,UAAU,QACVQ,KAAK,OACLC,aAAa,MACbC,MAAO7B,EACP8B,IAAK1B,EACL2B,SAAU,SAACT,GACTrB,EAAcqB,EAAEU,OAAOH,UAG3B,wBAAQV,UAAU,SAASQ,KAAK,SAAhC,uBAKF,oBAAGR,UAAU,SAAb,sBACW,sBAAMC,GAAG,gBAAT,SAA0B,GAAKxB,IAD1C,2CAC+F,sBAAMwB,GAAG,mBAAT,SAA6B,EAAItB,IADhI,gBAIA,mBAAGqB,UAAU,QAAb,yHAGA,sBAAKA,UAAU,WAAf,UACE,sBAAKA,UAAU,QAAf,UACE,qBAAKA,UAAU,QACf,qBAAKA,UAAU,QACf,qBAAKA,UAAU,QACf,qBAAKA,UAAU,QACf,qBAAKA,UAAU,QACf,qBAAKA,UAAU,QACf,qBAAKA,UAAU,QACf,qBAAKA,UAAU,QACf,qBAAKA,UAAU,QACf,qBAAKA,UAAU,WAEjB,qBAAKC,GAAG,iBAAiBD,UAAU,iBAAiBc,MAAO,CAAEC,UAAU,UAAD,OAAYtC,EAAQ,GAApB,cAK1E,qBAAKuB,UAAW,WAA0B,IAAbrB,GAA4B,KAAVF,EAAe,oBAAsB,IAApF,SACE,sBAAKuB,UAAU,gBAAf,UACE,mBAAGC,GAAG,cAAcD,UAAU,cAA9B,SACa,KAAVvB,EAAe,qBAAuB,qBAEzC,wBAAQwB,GAAG,eAAeD,UAAU,eAAeW,IAAKxB,EAAa6B,QA9D7E,WACEtC,EAAS,GACTE,EAAY,GACZE,EAAc,IACdN,EAAkBF,MA0DZ,iCC/GK2C,MATf,WACE,OACE,qBAAKjB,UAAU,MAAf,SAEE,cAAC,EAAD,OCKSkB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCFdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAG1Bb,K","file":"static/js/main.241dc768.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\r\n\r\nfunction Main() {\r\n  const [currentProblem, setCurrentProblem] = useState(generateProblem());\r\n  const [score, setScore] = useState(0);\r\n  const [mistakes, setMistakes] = useState(0);\r\n  const [userAnswer, setUserAnswer] = useState(\"\");\r\n  const [showError, setShowError] = useState(false);\r\n  const answerField = useRef(null);\r\n  const resetButton = useRef(null);\r\n\r\n  // useEffect to set focus on reset button so you can press enter(keyboard) as well as clicking it(mouse)\r\n  useEffect(() => {\r\n    if (score === 10 || mistakes === 3) {\r\n      setTimeout(() => resetButton.current.focus(), 331);\r\n    }\r\n  }, [score, mistakes]);\r\n\r\n  // Function to generate random number - used to randomly generate number 1, number 2 and the operator\r\n  function generateNumber(max) {\r\n    return Math.floor(Math.random() * (max + 1));\r\n  }\r\n\r\n  // Function to call the \"generateNumber() function\" to create random number's 1 and 2 and a random operator and store them as an object\r\n  function generateProblem() {\r\n    return {\r\n      numberOne: generateNumber(10),\r\n      numberTwo: generateNumber(10),\r\n      operator: [\"+\", \"-\", \"x\"][generateNumber(2)],\r\n    };\r\n  }\r\n\r\n  let correctAnswer;\r\n\r\n  // If statemetent to calculate the correct answer depending on the operator\r\n  if (currentProblem.operator === \"+\") {\r\n    correctAnswer = currentProblem.numberOne + currentProblem.numberTwo;\r\n  } else if (currentProblem.operator === \"-\") {\r\n    correctAnswer = currentProblem.numberOne - currentProblem.numberTwo;\r\n  } else if (currentProblem.operator === \"x\") {\r\n    correctAnswer = currentProblem.numberOne * currentProblem.numberTwo;\r\n  }\r\n\r\n  // Funtion to handle submit button\r\n  function handleSubmit(e) {\r\n    e.preventDefault();\r\n\r\n    answerField.current.focus(); // Focus the input field when you click submit\r\n\r\n    if (userAnswer == parseInt(correctAnswer)) {\r\n      setScore((prev) => prev + 1); // Increment \"score state\" by 1\r\n      setCurrentProblem(generateProblem()); // Generate new Math problem\r\n      setUserAnswer(\"\"); // Clear the users input field\r\n    } else {\r\n      setMistakes((prev) => prev + 1); // Increment \"mistake state\" by 1\r\n      setShowError(true); // Used to animate the math problem text when you get a questin wrong\r\n      setTimeout(() => setShowError(false), 401); // Used to animate the math problem text when you get a questin wrong\r\n    }\r\n  }\r\n\r\n  // Function for the overlay reset button to reset the game\r\n  function resetGame() {\r\n    setScore(0); // set \"score state\" back to 0\r\n    setMistakes(0); // set \"mistakes state\" back to 0\r\n    setUserAnswer(\"\"); // clear the users input field\r\n    setCurrentProblem(generateProblem()); // Generate new Math problem\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <div className={\"main-ui\" + (mistakes === 3 || score === 10 ? \" blurred\" : \"\")}>\r\n        {/* Math Problem */}\r\n        <p id=\"problem\" className={\"problem\" + (showError ? \" animate-wrong\" : \"\")}>\r\n          {currentProblem.numberOne} {currentProblem.operator} {currentProblem.numberTwo}\r\n        </p>\r\n        {/* Form */}\r\n        <form id=\"form\" className=\"form\" onSubmit={handleSubmit} action=\"\">\r\n          <input\r\n            id=\"input\"\r\n            className=\"input\"\r\n            type=\"text\"\r\n            autoComplete=\"off\"\r\n            value={userAnswer}\r\n            ref={answerField}\r\n            onChange={(e) => {\r\n              setUserAnswer(e.target.value);\r\n            }}\r\n          />\r\n          <button className=\"submit\" type=\"submit\">\r\n            Submit\r\n          </button>\r\n        </form>\r\n        {/* Status Description */}\r\n        <p className=\"status\">\r\n          You need <span id=\"points-needed\">{10 - score}</span> points to win, and are allowed to make <span id=\"mistakes-allowed\">{2 - mistakes}</span> mistakes.\r\n        </p>\r\n        {/* Game Notes */}\r\n        <p className=\"notes\">*Division problem's should be rounded to 1 decimal place, for example 0.66666667 should be answered as 0.7.</p>\r\n\r\n        {/* Progress bar/boxes to show the amount of correct answers */}\r\n        <div className=\"progress\">\r\n          <div className=\"boxes\">\r\n            <div className=\"box\"></div>\r\n            <div className=\"box\"></div>\r\n            <div className=\"box\"></div>\r\n            <div className=\"box\"></div>\r\n            <div className=\"box\"></div>\r\n            <div className=\"box\"></div>\r\n            <div className=\"box\"></div>\r\n            <div className=\"box\"></div>\r\n            <div className=\"box\"></div>\r\n            <div className=\"box\"></div>\r\n          </div>\r\n          <div id=\"progress-inner\" className=\"progress-inner\" style={{ transform: `scaleX(${score / 10})` }}></div>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Overlay- win or lose message */}\r\n      <div className={\"overlay\" + (mistakes === 3 || score === 10 ? \" overlay--visible\" : \"\")}>\r\n        <div className=\"overlay-inner\">\r\n          <p id=\"end-message\" className=\"end-message\">\r\n            {score === 10 ? \"Congrats! You won.\" : \"Sorry! You lost.\"}\r\n          </p>\r\n          <button id=\"reset-button\" className=\"reset-button\" ref={resetButton} onClick={resetGame}>\r\n            Start Over\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Main;\r\n","import \"./App.scss\";\nimport Main from \"./components/Main\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      {/* Component - Main*/}\n      <Main />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\nreportWebVitals();\n"],"sourceRoot":""}