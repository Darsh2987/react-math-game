{"version":3,"sources":["components/MathProblem.js","components/Form.js","components/ProgressBar.js","components/Overlay.js","components/Status.js","App.js","reportWebVitals.js","index.js"],"names":["MathProblem","props","id","className","showError","currentProblem","numberOne","operator","numberTwo","Form","onSubmit","handleSubmit","action","type","autoComplete","value","userAnswer","ref","answerField","onChange","e","setUserAnswer","target","ProgressBar","style","transform","score","Overlay","mistakes","resetButton","onClick","resetGame","Status","App","correctAnswer","useState","generateProblem","setCurrentProblem","setScore","setMistakes","setShowError","useRef","generateNumber","max","Math","floor","random","useEffect","setTimeout","current","focus","preventDefault","parseInt","prev","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6413b5b2.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst MathProblem = (props) => {\r\n  return (\r\n    <div>\r\n      {/* Math Problem */}\r\n      <p id=\"problem\" className={\"problem\" + (props.showError ? \" animate-wrong\" : \"\")}>\r\n        {props.currentProblem.numberOne} {props.currentProblem.operator} {props.currentProblem.numberTwo}\r\n      </p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MathProblem;\r\n","import React from \"react\";\r\n\r\nconst Form = (props) => {\r\n  return (\r\n    <div>\r\n      {/* Form */}\r\n      <form id=\"form\" className=\"form\" onSubmit={props.handleSubmit} action=\"\">\r\n        <input\r\n          id=\"input\"\r\n          className=\"input\"\r\n          type=\"text\"\r\n          autoComplete=\"off\"\r\n          value={props.userAnswer}\r\n          ref={props.answerField}\r\n          onChange={(e) => {\r\n            props.setUserAnswer(e.target.value);\r\n          }}\r\n        />\r\n        <button className=\"submit\" type=\"submit\">\r\n          Submit\r\n        </button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Form;\r\n","import React from \"react\";\r\n\r\nconst ProgressBar = (props) => {\r\n  return (\r\n    // Progress bar/boxes to show the amount of correct answers\r\n    <div className=\"progress\">\r\n      <div className=\"boxes\">\r\n        <div className=\"box\"></div>\r\n        <div className=\"box\"></div>\r\n        <div className=\"box\"></div>\r\n        <div className=\"box\"></div>\r\n        <div className=\"box\"></div>\r\n        <div className=\"box\"></div>\r\n        <div className=\"box\"></div>\r\n        <div className=\"box\"></div>\r\n        <div className=\"box\"></div>\r\n        <div className=\"box\"></div>\r\n      </div>\r\n      <div id=\"progress-inner\" className=\"progress-inner\" style={{ transform: `scaleX(${props.score / 10})` }}></div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ProgressBar;\r\n","import React from \"react\";\r\n\r\nconst Overlay = (props) => {\r\n  return (\r\n    // Overlay- win or lose message\r\n    <div className={\"overlay\" + (props.mistakes === 3 || props.score === 10 ? \" overlay--visible\" : \"\")}>\r\n      <div className=\"overlay-inner\">\r\n        <p id=\"end-message\" className=\"end-message\">\r\n          {props.score === 10 ? \"Congrats! You won.\" : \"Sorry! You lost.\"}\r\n        </p>\r\n        <button id=\"reset-button\" className=\"reset-button\" ref={props.resetButton} onClick={props.resetGame}>\r\n          Start Over\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Overlay;\r\n","import React from \"react\";\r\n\r\nconst Status = (props) => {\r\n  return (\r\n    <div>\r\n      {/* Status Description */}\r\n      <p className=\"status\">\r\n        You need <span id=\"points-needed\">{10 - props.score}</span> points to win, and are allowed to make <span id=\"mistakes-allowed\">{2 - props.mistakes}</span> mistakes.\r\n      </p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Status;\r\n","import { useState, useEffect, useRef } from \"react\";\n\nimport \"./App.scss\";\n\nimport MathProblem from \"./components/MathProblem\";\nimport Form from \"./components/Form\";\nimport ProgressBar from \"./components/ProgressBar\";\nimport Overlay from \"./components/Overlay\";\nimport Status from \"./components/Status\";\n\nfunction App() {\n  const [currentProblem, setCurrentProblem] = useState(generateProblem());\n  const [score, setScore] = useState(0);\n  const [mistakes, setMistakes] = useState(0);\n  const [userAnswer, setUserAnswer] = useState(\"\");\n  const [showError, setShowError] = useState(false);\n  const answerField = useRef(null);\n  const resetButton = useRef(null);\n\n  // useEffect to set focus on reset button so you can press enter(keyboard) as well as clicking it(mouse)\n  useEffect(() => {\n    if (score === 10 || mistakes === 3) {\n      setTimeout(() => resetButton.current.focus(), 331);\n    }\n  }, [score, mistakes]);\n\n  // Function to generate random number - used to randomly generate number 1, number 2 and the operator\n  function generateNumber(max) {\n    return Math.floor(Math.random() * (max + 1));\n  }\n\n  // Function to call the \"generateNumber() function\" to create random number's 1 and 2 and a random operator and store them as an object\n  function generateProblem() {\n    return {\n      numberOne: generateNumber(10),\n      numberTwo: generateNumber(10),\n      operator: [\"+\", \"-\", \"x\"][generateNumber(2)],\n    };\n  }\n\n  let correctAnswer;\n\n  // If statemetent to calculate the correct answer depending on the operator\n  if (currentProblem.operator === \"+\") {\n    correctAnswer = currentProblem.numberOne + currentProblem.numberTwo;\n  } else if (currentProblem.operator === \"-\") {\n    correctAnswer = currentProblem.numberOne - currentProblem.numberTwo;\n  } else if (currentProblem.operator === \"x\") {\n    correctAnswer = currentProblem.numberOne * currentProblem.numberTwo;\n  }\n\n  // Funcstion to handle submit button\n  function handleSubmit(e) {\n    e.preventDefault();\n\n    answerField.current.focus(); // Focus the input field when you click submit\n\n    if (userAnswer == parseInt(correctAnswer)) {\n      setScore((prev) => prev + 1); // Increment \"score state\" by 1\n      setCurrentProblem(generateProblem()); // Generate new Math problem\n      setUserAnswer(\"\"); // Clear the users input field\n    } else {\n      setMistakes((prev) => prev + 1); // Increment \"mistake state\" by 1\n      setShowError(true); // Used to animate the math problem text when you get a questin wrong\n      setTimeout(() => setShowError(false), 401); // Used to animate the math problem text when you get a question wrong\n    }\n  }\n\n  // Function for the overlay reset button to reset the game\n  function resetGame() {\n    setScore(0); // set \"score state\" back to 0\n    setMistakes(0); // set \"mistakes state\" back to 0\n    setUserAnswer(\"\"); // clear the users input field\n    setCurrentProblem(generateProblem()); // Generate new Math problem\n  }\n\n  return (\n    <div className=\"App\">\n      <div className={\"main-ui\" + (mistakes === 3 || score === 10 ? \" blurred\" : \"\")}>\n        <MathProblem showError={showError} currentProblem={currentProblem} />\n        <Form handleSubmit={handleSubmit} setUserAnswer={setUserAnswer} userAnswer={userAnswer} answerField={answerField} />\n        <Status score={score} mistakes={mistakes} />\n        <ProgressBar score={score} />\n      </div>\n\n      <Overlay score={score} mistakes={mistakes} resetButton={resetButton} resetGame={resetGame} />\n      <div />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\nreportWebVitals();\n"],"sourceRoot":""}